{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import random\n",
    "from math import sqrt\n",
    "\n",
    "g = 9.8\n",
    "dt = 0.1\n",
    "width, height = 200, 500\n",
    "\n",
    "def distance(x1, y1, x2, y2):\n",
    "    return sqrt(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)))\n",
    "\n",
    "class Ball:\n",
    "    def __init__(self, color, x, y, w, h, vx, vy):\n",
    "        self.color = color\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.w = w\n",
    "        self.h = h\n",
    "        self.vx = vx\n",
    "        self.vy = vy\n",
    "\n",
    "    def move(self):\n",
    "        for i in range(COUNT):\n",
    "            if balls[i] != self:\n",
    "                if distance(self.x, self.y, balls[i].x, balls[i].y) < (self.w / 2 + balls[i].w / 2):\n",
    "                    temp = self.vx\n",
    "                    self.vx = balls[i].vx\n",
    "                    balls[i].vx = temp\n",
    "\n",
    "                    temp = self.vy\n",
    "                    self.vy = balls[i].vy\n",
    "                    balls[i].vy = temp\n",
    "                    break\n",
    "\n",
    "        self.vy = self.vy + g * dt\n",
    "        dx = self.vx * dt\n",
    "        dy = self.vy * dt\n",
    "        if ((self.x + dx) > width) or ((self.x + dx) < 0):\n",
    "            self.vx = self.vx * -0.8\n",
    "        else:\n",
    "            self.x = self.x + dx\n",
    "        if ((self.y + dy) > height) or ((self.y + dy) < 0):\n",
    "            self.vy = self.vy * -0.8\n",
    "        else:\n",
    "            self.y = self.y + dy\n",
    "\n",
    "    def draw(self):\n",
    "        pygame.draw.ellipse(screen, self.color, (self.x, self.y, self.w, self.h))\n",
    "\n",
    "pygame.init()\n",
    "screen = pygame.display.set_mode((width, height))\n",
    "pygame.display.set_caption(\"Bouncing Balls\")\n",
    "clock = pygame.time.Clock()\n",
    "\n",
    "balls = []\n",
    "COUNT = 0\n",
    "t = 0\n",
    "\n",
    "running = True\n",
    "while running:\n",
    "    screen.fill((128, 128, 128))\n",
    "\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "        elif event.type == pygame.MOUSEBUTTONDOWN:\n",
    "            if COUNT < 100:\n",
    "                balls.append(Ball((random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),\n",
    "                                  event.pos[0], event.pos[1], 10, 10, random.uniform(-25, 25), 0))\n",
    "                COUNT += 1\n",
    "\n",
    "    for ball in balls:\n",
    "        ball.move()\n",
    "        ball.draw()\n",
    "\n",
    "    pygame.display.flip()\n",
    "    clock.tick(60)\n",
    "\n",
    "pygame.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
